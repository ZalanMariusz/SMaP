//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SMaP_APP.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SMaPEntities : DbContext
    {
        public SMaPEntities()
            : base("name=SMaPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Dictionary> Dictionary { get; set; }
        public virtual DbSet<DictionaryType> DictionaryType { get; set; }
        public virtual DbSet<Semester> Semester { get; set; }
        public virtual DbSet<ServiceRequest> ServiceRequest { get; set; }
        public virtual DbSet<ServiceStoreParams> ServiceStoreParams { get; set; }
        public virtual DbSet<ServiceTableField> ServiceTableField { get; set; }
        public virtual DbSet<SessionGroup> SessionGroup { get; set; }
        public virtual DbSet<Student> Student { get; set; }
        public virtual DbSet<Teacher> Teacher { get; set; }
        public virtual DbSet<Team> Team { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<ServiceStoreServiceParams> ServiceStoreServiceParams { get; set; }
        public virtual DbSet<ServiceStore> ServiceStore { get; set; }
        public virtual DbSet<ServiceTable> ServiceTable { get; set; }
        public virtual DbSet<ServiceStoreUserTeams> ServiceStoreUserTeams { get; set; }
    
        public virtual int uspCopySemester(Nullable<int> sourceId, string newSemesterName, Nullable<int> newSemesterTypeID, string sessionGroups, string teams, string students)
        {
            var sourceIdParameter = sourceId.HasValue ?
                new ObjectParameter("sourceId", sourceId) :
                new ObjectParameter("sourceId", typeof(int));
    
            var newSemesterNameParameter = newSemesterName != null ?
                new ObjectParameter("newSemesterName", newSemesterName) :
                new ObjectParameter("newSemesterName", typeof(string));
    
            var newSemesterTypeIDParameter = newSemesterTypeID.HasValue ?
                new ObjectParameter("newSemesterTypeID", newSemesterTypeID) :
                new ObjectParameter("newSemesterTypeID", typeof(int));
    
            var sessionGroupsParameter = sessionGroups != null ?
                new ObjectParameter("SessionGroups", sessionGroups) :
                new ObjectParameter("SessionGroups", typeof(string));
    
            var teamsParameter = teams != null ?
                new ObjectParameter("Teams", teams) :
                new ObjectParameter("Teams", typeof(string));
    
            var studentsParameter = students != null ?
                new ObjectParameter("Students", students) :
                new ObjectParameter("Students", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCopySemester", sourceIdParameter, newSemesterNameParameter, newSemesterTypeIDParameter, sessionGroupsParameter, teamsParameter, studentsParameter);
        }
    
        public virtual ObjectResult<Student> uspGetActiveStudents(Nullable<int> sessionGroupID, Nullable<int> teamID, Nullable<int> teacherID)
        {
            var sessionGroupIDParameter = sessionGroupID.HasValue ?
                new ObjectParameter("SessionGroupID", sessionGroupID) :
                new ObjectParameter("SessionGroupID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Student>("uspGetActiveStudents", sessionGroupIDParameter, teamIDParameter, teacherIDParameter);
        }
    
        public virtual ObjectResult<Student> uspGetActiveStudents(Nullable<int> sessionGroupID, Nullable<int> teamID, Nullable<int> teacherID, MergeOption mergeOption)
        {
            var sessionGroupIDParameter = sessionGroupID.HasValue ?
                new ObjectParameter("SessionGroupID", sessionGroupID) :
                new ObjectParameter("SessionGroupID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Student>("uspGetActiveStudents", mergeOption, sessionGroupIDParameter, teamIDParameter, teacherIDParameter);
        }
    }
}
